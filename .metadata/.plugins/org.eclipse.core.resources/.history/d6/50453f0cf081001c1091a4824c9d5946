package com.lamichhane.users.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.lamichhane.users.dao.UsersDao;
import com.lamichhane.users.entity.UserEntity;
import com.lamichhane.users.model.AlbumResponseModel;
import com.lamichhane.users.shared.UserDto;

@Service
public class UserServiceImpl implements UserService {
	
	@Autowired
	UsersDao usersDao;
	
	@Autowired
	BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Autowired	
	RestTemplate getRestTemplate;

	@Override
	public UserDto createUser(UserDto userDetails) {
		
		userDetails.setUserId(UUID.randomUUID().toString());
		userDetails.setEncryptedPassword(bCryptPasswordEncoder.encode(userDetails.getPassword()));
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		UserEntity entity = mapper.map(userDetails, UserEntity.class);
		
		UserDto dto = mapper.map(entity, UserDto.class);
		
		usersDao.save(entity);
		return dto; 
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		
		UserEntity entity = usersDao.findByEmail(username);
		if(entity == null) {
			throw new UsernameNotFoundException(username);
		}
		return new User(entity.getEmail(),entity.getEncryptedPassword(),true,true,true,true,new ArrayList<>());
		
	}

	@Override
	public UserDto getUserDetailByEmail(String email) {
		UserEntity entity = usersDao.findByEmail(email);
		if(entity == null) {
			throw new UsernameNotFoundException(email);
		}
		return new ModelMapper().map(entity,UserDto.class);
	}

	@Override
	public UserDto getUserByUserId(String userId) {
		UserEntity userEntity = usersDao.findByUserId(userId);
		if(userEntity == null) {
			throw new UsernameNotFoundException("User not found");
		}
		UserDto userDto = new ModelMapper().map(userEntity, UserDto.class);
		
		String albumUrl = "";
		ResponseEntity<List<AlbumResponseModel>> albumsListResponse = getRestTemplate.exchange(albumUrl, HttpMethod.GET,null,new ParameterizedTypeReference<List<AlbumResponseModel>>(){
			
		});
		return userDto;
		
	}

}
