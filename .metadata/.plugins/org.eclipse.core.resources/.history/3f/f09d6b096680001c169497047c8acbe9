package com.lamichhane.zuul.api.gateway.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
@EnableWebSecurity
public class WebSecurity extends WebSecurityConfigurerAdapter{
	
	
	private Environment environment;
	
	public WebSecurity(Environment environment) {
		this.environment = environment;
	}
	
	

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		
		http.csrf().disable();
		http.headers().frameOptions().disable();
		http.authorizeRequests().antMatchers(environment.getProperty("api.h2console.url.path")).permitAll();
		http.authorizeRequests().antMatchers(HttpMethod.POST,environment.getProperty("api.registration.url.path")).permitAll();
		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
		
		
		
		
	}
	
//	private AuthenticationFilter getAuthenticationFilter() throws Exception{
//		AuthenticationFilter authenticationFilter = new AuthenticationFilter(userService,environment,authenticationManager());
//		//authenticationFilter.setAuthenticationManager(authenticationManager());
//	    authenticationFilter.setFilterProcessesUrl(environment.getProperty("login.url.path"));
//		return  authenticationFilter;
//	}
//
//
//
//	@Override
//	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//		auth.userDetailsService(userService).passwordEncoder(bCryptPasswordEncoder);
//	}
	
	

	
}
